<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PommaLabs.Thrower</name>
    </assembly>
    <members>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ArgumentException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.If(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given condition is true.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfNot(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentException">If given condition is false.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfNot(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given condition is false.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsEqualTo``2(``0,``1)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argument"/> is equal to <paramref name="comparand"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsEqualTo``2(``0,``1,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argument"/> is equal to <paramref name="comparand"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotEqualTo``2(``0,``1)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotEqualTo``2(``0,``1,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsSameAs``2(``0,``1)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> if and only if specified
              arguments reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is the same object as <paramref name="comparand"/>.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsSameAs``2(``0,``1,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> with given message
              <paramref name="message"/> if and only if specified arguments reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is the same object as <paramref name="comparand"/>.
            </exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotSameAs``2(``0,``1)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> if and only if specified
              arguments do not reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not the same object as <paramref name="comparand"/>.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotSameAs``2(``0,``1,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> with given message
              <paramref name="message"/> if and only if specified arguments do not reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not the same object as <paramref name="comparand"/>.
            </exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValid``1(``0)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given argument is not valid.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentException">If given argument is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValid``1(``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given argument is not valid.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given argument is not valid.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <param name="argumentName">The name of the enumeration argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(System.Nullable{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(System.Nullable{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <param name="argumentName">The name of the enumeration argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum(System.Type,System.Object)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <param name="enumType">The enumeration type.</param>
            <param name="argument">The enumeration argument.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
            <remarks>
              This methid is slower than <see cref="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0)"/>, please use
              that one if possible.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum(System.Type,System.Object,System.String,System.String)">
             <summary>
               Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
             </summary>
             <param name="enumType">The enumeration type.</param>
             <param name="argument">The enumeration argument.</param>
             <param name="argumentName">The name of the enumeration argument.</param>
             <param name="message">The message.</param>
             <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
             <remarks>
               <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            
               This methid is slower than
               <see cref="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0,System.String,System.String)"/>, please use that one if possible.
             </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String,PommaLabs.Thrower.Validation.EmailAddressValidator.Options)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <param name="validatorOptions">Customizations for the validation process.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String,System.String,PommaLabs.Thrower.Validation.EmailAddressValidator.Options,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="validatorOptions">Customizations for the validation process.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidPhoneNumber(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid phone number.
            </summary>
            <param name="phoneNumber">A phone number.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid phone number.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidPhoneNumber(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid phone number.
            </summary>
            <param name="phoneNumber">A phone number.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid phone number.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null or empty.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.ArgumentException">If given string is null or empty.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null or empty.
            </summary>
            <param name="value">The string value.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given string is null or empty.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrWhiteSpace(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null, empty or blank.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.ArgumentException">If given string is null, empty or blank.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null, empty or blank.
            </summary>
            <param name="value">The string value.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given string is null, empty or blank.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given collection is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the collection.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:System.ArgumentException">If given collection is null or empty.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given collection is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the collection.</typeparam>
            <param name="value">The collection.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given collection is null or empty.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumerable is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the enumerable.</typeparam>
            <param name="value">The enumerable.</param>
            <exception cref="T:System.ArgumentException">If given enumerable is null or empty.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumerable is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the enumerable.</typeparam>
            <param name="value">The enumerable.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given enumerable is null or empty.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ArgumentNullException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.If(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is true.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfNot(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is false.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfNot(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is false.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(``0)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException">If given argument is null.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
            <exception cref="T:System.ArgumentNullException">If given argument is null.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0}@)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument, by reference.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0}@,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument, by reference.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.If(System.Boolean,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The optional name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfNot(System.Boolean,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The optional name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfNot(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNaN(System.Double,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to be tested for <see cref="F:System.Double.NaN"/> equality.</param>
            <param name="argumentName">The optional argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NaN"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNaN(System.Double,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to be tested for <see cref="F:System.Double.NaN"/> equality.</param>
            <param name="argumentName">The argument name.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NaN"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsPositiveInfinity(System.Double,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.PositiveInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.PositiveInfinity"/> equality.
            </param>
            <param name="argumentName">The optional argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.PositiveInfinity"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsPositiveInfinity(System.Double,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.PositiveInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.PositiveInfinity"/> equality.
            </param>
            <param name="argumentName">The argument name.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.PositiveInfinity"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNegativeInfinity(System.Double,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.NegativeInfinity"/> equality.
            </param>
            <param name="argumentName">The optional argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NegativeInfinity"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNegativeInfinity(System.Double,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.NegativeInfinity"/> equality.
            </param>
            <param name="argumentName">The argument name.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NegativeInfinity"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1">
            <summary>
              Generic handler used for common exceptions like <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="TException">The type of the handled exception.</typeparam>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.If(System.Boolean,System.String)">
            <summary>
              Throws <typeparamref name="TException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfNot(System.Boolean,System.String)">
            <summary>
              Throws <typeparamref name="TException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsAssignableFrom``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type can be assigned to specified object.
            </summary>
            <typeparam name="TType">The type whose instance must be assigned to given object.</typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotAssignableFrom``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type cannot be assigned to specified object.
            </summary>
            <typeparam name="TType">
              The type whose instance must not be assigned to given object.
            </typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type can be assigned to specified object.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type whose instance must be assigned to given object.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type cannot be assigned to specified object.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type whose instance must not be assigned to given object.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsInstanceOf``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has given type.
            </summary>
            <typeparam name="TType">The type the object must have.</typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotInstanceOf``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has not given type.
            </summary>
            <typeparam name="TType">The type the object must not have.</typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsInstanceOf(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has given type.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type the object must have.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotInstanceOf(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has not given type.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type the object must not have.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.InvalidOperationExceptionHandler">
            <summary>
              Handler for <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.InvalidOperationExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IO.InvalidDataExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.InvalidDataExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IO.IOExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IO.IOException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.IOExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IO.FileNotFoundExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.FileNotFoundExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler">
            <summary>
              Handler for <see cref="T:PommaLabs.Thrower.HttpException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.If(System.Boolean,System.Net.HttpStatusCode,System.String)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.If(System.Boolean,System.Net.HttpStatusCode,System.String,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The required message.</param>
            <param name="additionalInfo">Additional exception info.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.IfNot(System.Boolean,System.Net.HttpStatusCode,System.String)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is false.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.IfNot(System.Boolean,System.Net.HttpStatusCode,System.String,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The required message.</param>
            <param name="additionalInfo">Additional exception info.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is false.</exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.InvalidCastExceptionHandler">
            <summary>
              Handler for <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.InvalidCastExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.NotSupportedExceptionHandler">
            <summary>
              Handler for <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.NotSupportedExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ObjectDisposedExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ObjectDisposedException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ObjectDisposedExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <param name="disposed">Whether the object has been disposed or not.</param>
            <param name="objectName">The required object name.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ObjectDisposedException">If the object has been disposed.</exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="T:PommaLabs.Thrower.HttpExceptionInfo">
            <summary>
              Additional info which will be included into <see cref="T:PommaLabs.Thrower.HttpException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.HttpExceptionInfo.#ctor(System.Object,System.String)">
            <summary>
              Builds the additional exception info.
            </summary>
            <param name="errorCode">The application defined error code.</param>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="P:PommaLabs.Thrower.HttpExceptionInfo.ErrorCode">
            <summary>
              The application defined error code.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpExceptionInfo.UserMessage">
            <summary>
              An error message which can be shown to user.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.HttpException">
            <summary>
              Represents an exception which contains an error message that should be delivered through
              the HTTP response, using given status code.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode)">
            <summary>
              Builds the exception using given status code.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Builds the exception using given status code.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="additionalInfo">Additional exception info.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
              Builds the exception using given status code and message.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Builds the exception using given status code, message and error code.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
            <param name="additionalInfo">Additional exception info.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String,System.Exception)">
            <summary>
              Builds the exception using given status code, message and inner exception.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String,System.Exception,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Builds the exception using given status code, message, error code and inner exception.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="additionalInfo">Additional exception info.</param>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.HttpStatusCode">
            <summary>
              The HTTP status code assigned to this exception.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.ErrorCode">
            <summary>
              The application defined error code.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.DefaultErrorCode">
            <summary>
              The default application defined error code, used when none has been specified.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.UserMessage">
            <summary>
              An error message which can be shown to the user.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.DefaultUserMessage">
            <summary>
              The default user message.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Raise">
            <summary>
              New exception handling mechanism, which is more fluent than the old ones.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Raise.MethodImplOptions">
            <summary>
              Default implementation options for Raise methods.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ArgumentException">
            <summary>
              Handler for <see cref="T:System.ArgumentException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ArgumentNullException">
            <summary>
              Handler for <see cref="T:System.ArgumentNullException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ArgumentOutOfRangeException">
            <summary>
              Handler for <see cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.IndexOutOfRangeException">
            <summary>
              Handler for <see cref="T:System.IndexOutOfRangeException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.InvalidCastException">
            <summary>
              Handler for <see cref="T:System.InvalidCastException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.InvalidOperationException">
            <summary>
              Handler for <see cref="T:System.InvalidOperationException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.NotSupportedException">
            <summary>
              Handler for <see cref="T:System.NotSupportedException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ObjectDisposedException">
            <summary>
              Handler for <see cref="T:System.ObjectDisposedException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.FileNotFoundException">
            <summary>
              Handler for <see cref="T:System.IO.FileNotFoundException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.InvalidDataException">
            <summary>
              Handler for <see cref="T:System.IO.InvalidDataException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.IOException">
            <summary>
              Handler for <see cref="T:System.IO.IOException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.HttpException">
            <summary>
              Handler for <see cref="P:PommaLabs.Thrower.Raise.HttpException"/>
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.PortableTypeInfo">
            <summary>
              Portable version of some useful reflection methods.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.PortableTypeInfo.EmptyTypes">
            <summary>
              Represents an empty array of type <see cref="T:System.Type"/>. This property is read-only.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
              Gets the custom attributes for given type.
            </summary>
            <param name="type">The type.</param>
            <param name="inherit">
              True to search this type's inheritance chain to find the attributes; otherwise, false.
            </param>
            <returns>The custom attributes for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
              Gets the custom attributes for given member.
            </summary>
            <param name="memberInfo">The member.</param>
            <param name="inherit">
              True to search this member's inheritance chain to find the attributes; otherwise, false.
            </param>
            <returns>The custom attributes for given member.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetConstructors(System.Type)">
            <summary>
              Gets the constructors for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The constructors for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetConstructors``1">
            <summary>
              Gets the constructors for given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The constructors for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetBaseType(System.Type)">
            <summary>
              Gets the base type of given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The base type of given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetGenericTypeDefinition(System.Type)">
            <summary>
              Gets the generic type definition of given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The generic type definition of given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetGenericTypeArguments(System.Type)">
            <summary>
              Gets the generic type arguments of given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The generic type arguments of given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetInterfaces(System.Type)">
            <summary>
              Gets the interfaces for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The interfaces for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicProperties(System.Type)">
            <summary>
              Gets all the public instance properties for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The public instance properties for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicProperties``1">
            <summary>
              Gets all the instance properties for given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The instance properties for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicPropertyValue(System.Object,System.String)">
            <summary>
              Gets the value of given property on given instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">The property name.</param>
            <returns>The value of given property on given instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicPropertyValue``1(System.Object,System.String)">
            <summary>
              Gets the value of given property on given instance.
            </summary>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="propertyName">The property name.</param>
            <returns>The value of given property on given instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
              Gets the value of given property on given instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyInfo">The property info.</param>
            <returns>The value of given property on given instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsAbstract(System.Type)">
            <summary>
              Determines whether the specified type is abstract.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is abstract.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsAbstract``1">
            <summary>
              Determines whether the specified type is abstract.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is abstract.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsClass(System.Type)">
            <summary>
              Determines whether the specified type is a class.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a class.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsClass``1">
            <summary>
              Determines whether the specified type is a class.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a class.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsAssignableFrom(System.Object,System.Type)">
            <summary>
              Determines whether an instance of the current <see cref="T:System.Type"/> can be assigned from
              an instance of the specified Type.
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The type.</param>
            <returns>
              Whether an instance of the current <see cref="T:System.Type"/> can be assigned from an instance
              of the specified Type.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsEnum(System.Type)">
            <summary>
              Determines whether the specified type is an enumeration.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is an enumeration.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsEnum``1">
            <summary>
              Determines whether the specified type is an enumeration.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is an enumeration.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericType(System.Type)">
            <summary>
              Determines whether the specified type is a generic type.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a generic type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericType``1">
            <summary>
              Determines whether the specified type is a generic type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a generic type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericTypeDefinition(System.Type)">
            <summary>
              Determines whether the specified type is a generic type definition.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a generic type definition.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericTypeDefinition``1">
            <summary>
              Determines whether the specified type is a generic type definition.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a generic type definition.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsInstanceOf(System.Object,System.Type)">
            <summary>
              Determines whether the specified object is an instance of the current <see cref="T:System.Type"/>.
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The type.</param>
            <returns>Whether the specified object is an instance of the current <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsInterface(System.Type)">
            <summary>
              Determines whether the specified type is an interface.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is an interface.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsInterface``1">
            <summary>
              Determines whether the specified type is an interface.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is an interface.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPrimitive(System.Type)">
            <summary>
              Determines whether the specified type is primitive.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is primitive.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPrimitive``1">
            <summary>
              Determines whether the specified type is primitive.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is primitive.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsValueType(System.Type)">
            <summary>
              Determines whether the specified type is a value type.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a value type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsValueType``1">
            <summary>
              Determines whether the specified type is a value type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a value type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPublic(System.Type)">
            <summary>
              Determines whether the specified type is public.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is public.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPublic``1">
            <summary>
              Determines whether the specified type is public.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is public.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsNestedPublic(System.Type)">
            <summary>
              Determines whether the specified type is nested public.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is nested public.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsNestedPublic``1">
            <summary>
              Determines whether the specified type is nested public.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is nested public.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.PortableTypeInfo.CastTo`1">
            <summary>
              Class to cast to type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <remarks>Found on StackOverflow: "http://stackoverflow.com/a/23391746/1880086".</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.CastTo`1.From``1(``0)">
            <summary>
              Casts <typeparamref name="S"/> to <typeparamref name="T"/>. This does not cause
              boxing for value types. Useful in generic methods.
            </summary>
            <param name="s">The value that should be cast.</param>
            <typeparam name="S">Source type to cast from. Usually a generic type.</typeparam>
        </member>
        <member name="T:PommaLabs.Thrower.RaiseBase">
            <summary>
              Stores items shared by various <see cref="T:PommaLabs.Thrower.Raise`1"/> instances.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.NoCtorParams">
            <summary>
              Stores an empty array of <see cref="T:System.Object"/> used to activate constructors without parameters.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.NoCtorTypes">
            <summary>
              Stores an empty array of <see cref="T:System.Type"/> used to seek constructors without parameters.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.StrExCtorTypes">
            <summary>
              Stores the types needed to seek the constructor which takes a string and an exception
              as parameters to instance the exception.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.StrCtorType">
            <summary>
              Stores the type needed to seek the constructor which takes a string as parameter to
              instance the exception.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Raise`1">
            <summary>
              Contains methods that throw specified exception <typeparamref name="TEx"/> if given
              conditions will be verified.
            </summary>
            <typeparam name="TEx">The type of the exceptions thrown if conditions will be satisfied.</typeparam>
            <remarks>
              In order to achieve a good speed, the class caches an instance of the constructors found
              via reflection; therefore, constructors are looked for only once.
            </remarks>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.ExTypeIsAbstract">
            <summary>
              Stores wheter the exception type is abstract or not. We do this both to provide better
              error messages for the end user and to avoid calling wrong constructors.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.NoArgsCtor">
            <summary>
              Caches an instance of the constructor which takes no arguments. If it does not exist,
              then this field will be null. There must be an instance for each type associated with <see cref="T:PommaLabs.Thrower.Raise`1"/>.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.MsgCtor">
            <summary>
              Caches an instance of the constructor which creates an exception with a message. If it
              does not exist, then this field will be null. There must be an instance for each type
              associated with <see cref="T:PommaLabs.Thrower.Raise`1"/>.
            </summary>
            <remarks>
              At first, we look for constructors which take a string and an inner exception, because
              some standard exceptions (like ArgumentException or ArgumentNullException) have a
              constructor which takes a string as a "parameter name", not as a message. If a
              constructor with that signature is not found, then we look for a constructor with a
              string as the only argument.
            </remarks>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.MsgArgCount">
            <summary>
              Keeps the number of arguments required by the constructor who creates the exception
              with a message.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.#ctor">
            <summary>
              <see cref="T:PommaLabs.Thrower.Raise`1"/> must not be instanced.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.If(System.Boolean)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with no parameters,
              or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.If(System.Boolean,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as
              parameters, either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an
              <see cref="T:System.Exception"/>. The same exception is thrown when
              <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type
              <typeparamref name="TEx"/>, with the message specified by <paramref name="message"/>,
              will be thrown. <br/> In order to do that, <typeparamref name="TEx"/> must have either
              a constructor which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>
              as arguments, or a constructor which takes a <see cref="T:System.String"/> as only parameter.
              <br/> If both constructors are available, then the one which takes a
              <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.If(System.Boolean,System.Object,System.Object[])">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="firstParam">
              The first parameter that will be used for the exception constructor, if needed.
            </param>
            <param name="otherParams">
              Other parameters that will be used for the exception constructor, if needed.
            </param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with specified
              parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which takes specified arguments.
              Moreover, each specified argument must not be null, otherwise type inference will fail.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.IfNot(System.Boolean)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with no parameters,
              or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.IfNot(System.Boolean,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as
              parameters, either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an
              <see cref="T:System.Exception"/>. The same exception is thrown when
              <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type
              <typeparamref name="TEx"/>, with the message specified by <paramref name="message"/>,
              will be thrown. <br/> In order to do that, <typeparamref name="TEx"/> must have either
              a constructor which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>
              as arguments, or a constructor which takes a <see cref="T:System.String"/> as only parameter.
              <br/> If both constructors are available, then the one which takes a
              <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.IfNot(System.Boolean,System.Object,System.Object[])">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="firstParam">
              The first parameter that will be used for the exception constructor, if needed.
            </param>
            <param name="otherParams">
              Other parameters that will be used for the exception constructor, if needed.
            </param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with specified
              parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which takes specified arguments.
              Moreover, each specified argument must not be null, otherwise type inference will fail.
            </remarks>
        </member>
        <member name="T:PommaLabs.Thrower.ThrowerException">
            <summary>
              Exception thrown by <see cref="T:PommaLabs.Thrower.Raise`1"/> when the type parameter passed to that class
              has something invalid (missing constructors, etc).
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EmailAddressAttribute">
            <summary>
              Validates email addresses stored as <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EmailAddressAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.EmailAddressAttribute.Options">
            <summary>
              Options used by the validation process.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EmailAddressAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
              Validates the email address stored in <paramref name="value"/>.
            </summary>
            <param name="value">The email address that should be validated.</param>
            <param name="validationContext">The validation context.</param>
            <returns>True if given email address is valid or null, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EmailAddressValidator">
            <summary>
              An email address validator.
            </summary>
            <remarks>An email address validator.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EmailAddressValidator.Validate(System.String,PommaLabs.Thrower.Validation.EmailAddressValidator.Options)">
            <summary>
              Validates the specified email address.
            </summary>
            <remarks>
              <para>Validates the syntax of an email address.</para>
              <para>
                If <paramref name="options"/> contains <see cref="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.AllowInternational"/>, then
                the validator will use the newer International Email standards for validating the
                email address.
              </para>
            </remarks>
            <returns><c>true</c> if the email address is valid; otherwise <c>false</c>.</returns>
            <param name="emailAddress">An email address.</param>
            <param name="options">Customizations for the validation process.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="emailAddress"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EmailAddressValidator.Options">
            <summary>
              Options used by validation process.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.None">
            <summary>
              No option specified.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.AllowInternational">
            <summary>
              Whether the validator should allow international characters or not.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.AllowTopLevelDomains">
            <summary>
              Whether the validator should allow addresses at top-level domains or not.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EnumerationValidator">
            <summary>
              An enumeration validator which ensures given enumeration value is defined in specified
              enumeration type. This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationValidator.Validate``1(System.Nullable{``0})">
            <summary>
              Ensures given enumeration value is defined in specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The enumeration value.</param>
            <returns>
              True if given enumeration value is defined in specified enumeration type, false otherwise.
            </returns>
            <remarks>This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationValidator.Validate``1(``0)">
            <summary>
              Ensures given enumeration value is defined in specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The enumeration value.</param>
            <returns>
              True if given enumeration value is defined in specified enumeration type, false otherwise.
            </returns>
            <remarks>This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationValidator.Validate(System.Type,System.Object)">
            <summary>
              Ensures given enumeration value is defined in specified enumeration type.
            </summary>
            <param name="enumType">The enumeration type.</param>
            <param name="value">The enumeration value.</param>
            <returns>
              True if given enumeration value is defined in specified enumeration type, false otherwise.
            </returns>
            <remarks>This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.ObjectValidator">
            <summary>
              Validates an object public properties that have been decorated with the
              <see cref="T:PommaLabs.Thrower.Validation.ValidateAttribute"/> custom attribute.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.ObjectValidator.RootPlaceholder">
            <summary>
              The placeholder used to indicate the starting object.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ObjectValidator.FormatValidationErrors(System.Collections.Generic.IEnumerable{PommaLabs.Thrower.Validation.ValidationError},System.String)">
            <summary>
              Prepares a readable messages containing all validation errors.
            </summary>
            <param name="validationErrors">The validation errors.</param>
            <param name="startMessage">An optional prefix.</param>
            <returns>A readable messages containing all validation errors.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ObjectValidator.Validate(System.Object,System.Collections.Generic.IList{PommaLabs.Thrower.Validation.ValidationError}@)">
            <summary>
              Validates given object using information contained in the
              <see cref="T:PommaLabs.Thrower.Validation.ValidateAttribute"/> custom attribute.
            </summary>
            <param name="obj">The object to be validated.</param>
            <param name="validationErrors">All validation errors found.</param>
            <returns>True if object is valid, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EnumerationAttribute">
            <summary>
              Validates enumeration-typed members.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
              Validates the enumeration stored in <paramref name="value"/>.
            </summary>
            <param name="value">The enumeration that should be validated.</param>
            <param name="validationContext">The validation context.</param>
            <returns>True if given enumeration is valid, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.PhoneNumberAttribute">
            <summary>
              Validates phone numbers stored as <see cref="T:System.String"/> members.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.PhoneNumberAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.PhoneNumberAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
              Validates the phone number stored in <paramref name="value"/>.
            </summary>
            <param name="value">The phone number that should be validated.</param>
            <param name="validationContext">The validation context.</param>
            <returns>True if given phone number is valid or null, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.PhoneNumberValidator">
            <summary>
              A phone number validator.
            </summary>
            <remarks>A phone number validator.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.PhoneNumberValidator.Validate(System.String)">
            <summary>
              Validates the specified phone number.
            </summary>
            <param name="phoneNumber">A phone number.</param>
            <returns><c>true</c> if the phone number is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.ValidateAttribute">
            <summary>
              Indicates that the property should be validated.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.Required">
             <summary>
               Indicates that the property is required, that is, it will be checked against null.
            
               Default value is false.
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.Enumerable">
             <summary>
               If the property is an <see cref="T:System.Collections.IEnumerable"/>, then this flag controls whether it
               should enumerated or not.
            
               Default value is true.
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.EnumerableItemsRequired">
             <summary>
               If the property is an <see cref="T:System.Collections.IEnumerable"/>, then this flag controls whether its
               items are required or not.
            
               Default value is false.
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.CollectionItemsMinCount">
             <summary>
               If the property is an <see cref="T:System.Collections.ICollection"/>, then this flag controls the minimum
               value for <see cref="P:System.Collections.ICollection.Count"/>.
            
               Default value is
               <code>
                 0L
               </code>
               .
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.CollectionItemsMaxCount">
             <summary>
               If the property is an <see cref="T:System.Collections.ICollection"/>, then this flag controls the maximum
               value for <see cref="P:System.Collections.ICollection.Count"/>.
            
               Default value is <see cref="F:System.Int64.MaxValue"/>.
             </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.ValidationError">
            <summary>
              Represents an error found while validating an object.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidationError.Path">
            <summary>
              The path to the wrong property.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidationError.Reason">
            <summary>
              What caused the error.
            </summary>
        </member>
        <member name="T:System.SerializableAttribute">
            <summary>
              Fake, this is used only to allow serialization on portable platforms.
            </summary>
        </member>
        <member name="T:System.NonSerializedAttribute">
            <summary>
              Indicates that a field of a serializable class should not be serialized. This class cannot
              be inherited.
            </summary>
        </member>
    </members>
</doc>
